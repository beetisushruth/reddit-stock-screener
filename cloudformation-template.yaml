AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Reddit Stock Screener with IAM, S3, EventBridge, Lambda, SNS, and Bedrock integration'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: 'Environment name (dev, staging, prod)'
    AllowedValues: ['dev', 'staging', 'prod']
  
  ProjectName:
    Type: String
    Default: 'reddit-stock-screener'
    Description: 'Name for the project'
  
  SNSNotificationEmails:
    Type: CommaDelimitedList
    Description: 'Comma-separated list of email addresses for SNS notifications'
    Default: 'admin@example.com'
  
  EventBridgeRuleName:
    Type: String
    Default: 'reddit-stock-screener-rule'
    Description: 'Name for the EventBridge rule'
  
  EventBridgeRuleDescription:
    Type: String
    Default: 'Triggers Reddit Stock Screener Lambda function every 5 minutes'
    Description: 'Description for the EventBridge rule'
  
  S3BucketName:
    Type: String
    Default: 'reddit-stock-screener-data'
    Description: 'Name for the S3 bucket (must be globally unique)'
  
  LambdaCodeS3Bucket:
    Type: String
    Description: 'S3 bucket containing the Lambda function ZIP file'
    Default: 'reddit-stock-screener-lambda-code'
  
  LambdaCodeS3Key:
    Type: String
    Description: 'S3 key for the Lambda function ZIP file'
    Default: 'lambda-function.zip'

Resources:
  # S3 Bucket for storing data
  StockScreenerS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldData
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # S3 Bucket Policy
  StockScreenerS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StockScreenerS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub '${StockScreenerS3Bucket}/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256
          - Sid: EnforceSSLOnly
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Sub '${StockScreenerS3Bucket}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${StockScreenerS3Bucket}'
                  - !Sub '${StockScreenerS3Bucket}/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                Resource: !Ref StockScreenerSNSTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:reddit-api-*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                  - 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Topic for notifications
  StockScreenerSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-notifications-${Environment}'
      DisplayName: !Sub 'Reddit Stock Screener Notifications - ${Environment}'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Subscriptions for multiple email addresses
  SNSEmailSubscription1:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref StockScreenerSNSTopic
      Protocol: email
      Endpoint: !Select [0, !Ref SNSNotificationEmails]

  # Lambda Function
  StockScreenerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SNS_TOPIC_ARN: !Ref StockScreenerSNSTopic
          S3_BUCKET_NAME: !Ref StockScreenerS3Bucket
          BEDROCK_MODEL_ID: 'anthropic.claude-3-sonnet-20240229-v1:0'
          REDDIT_SUBREDDITS: 'wallstreetbets'
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EventBridge Rule
  StockScreenerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref EventBridgeRuleName
      Description: !Ref EventBridgeRuleDescription
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt StockScreenerLambda.Arn
          Id: !Sub '${ProjectName}-target-${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EventBridge Permission for Lambda
  LambdaEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StockScreenerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StockScreenerEventRule.Arn

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StockScreenerLambda}'
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName


Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt StockScreenerLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref StockScreenerLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  SNSTopicArn:
    Description: 'ARN of the SNS topic'
    Value: !Ref StockScreenerSNSTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  S3BucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref StockScreenerS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  IAMRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleArn'

  EventBridgeRuleArn:
    Description: 'ARN of the EventBridge rule'
    Value: !GetAtt StockScreenerEventRule.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EventBridgeRuleArn'
